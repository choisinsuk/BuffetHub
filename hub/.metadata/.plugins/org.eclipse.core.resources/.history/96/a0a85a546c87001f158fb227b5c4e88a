package com.hub.security.filter;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;
import java.util.Map;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import com.google.gson.Gson;
import com.hub.dto.UserDTO;
import com.hub.util.JWTUtil;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.log4j.Log4j2;

@Log4j2
public class JWTCheckFilter extends OncePerRequestFilter {
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		log.info("-------------JWTCheckFilter--------------");
		String authHeaderStr = request.getHeader("Authorization");
		try {
			// Bearer accestoken...
			String accessToken = authHeaderStr.substring(7);
			Map<String, Object> claims = JWTUtil.validateToken(accessToken);
			log.info("JWT claims: " + claims);
			// filterChain.doFilter(request, response);

			String ur_id = (String) claims.get("ur_id");
			String ur_pw = (String) claims.get("ur_pw");
			String ur_nm = (String) claims.get("ur_nm");
			String ur_phn = (String) claims.get("ur_phn");
			String ur_eml = (String) claims.get("ur_eml");
			String ur_condition_code = (String) claims.get("ur_condition_code");
			Date ur_join_dt = (Date) claims.get("ur_join_dt");
			String ur_prpl_yn = (String) claims.get("ur_prpl_yn");
			String ur_stmbpl_yn = (String) claims.get("ur_stmbpl_yn");
			String ur_auth_code = (String) claims.get("ur_auth_code");

			UserDTO userDTO = new UserDTO(ur_id, ur_pw, ur_nm, ur_phn, ur_eml, ur_prpl_yn, ur_stmbpl_yn, null, null, null, null);

			log.info("----------------------------------------");
			log.info(userDTO);
			log.info(userDTO.getAuthorities());

			UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userDTO,
					ur_pw, userDTO.getAuthorities());
			SecurityContextHolder.getContext().setAuthentication(authenticationToken);

		} catch (Exception e) {
			log.error("JWT Check Error..........");
			log.error(e.getMessage());
			Gson gson = new Gson();
			String msg = gson.toJson(Map.of("error", "ERROR_ACCESS_TOKEN"));
			response.setContentType("application/json");
			PrintWriter printWriter = response.getWriter();
			printWriter.println(msg);
			printWriter.close();
		}
		log.info("---------------------------");
		log.info("---------------------------");
		filterChain.doFilter(request, response);
	}

	@Override
	protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {
		// Preflight 요청은 체크하지 않음
		if (request.getMethod().equals("OPTIONS")) {
			return true;
		}
		String path = request.getRequestURI();
		log.info("Check uri................" + path);

		// api/user/ 경로의 호출은 체크하지 않음
		if (path.startsWith("/api/user/")) {
			return true;
		}

		return false;
	}
}
